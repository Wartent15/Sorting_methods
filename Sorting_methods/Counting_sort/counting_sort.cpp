#include "counting_sort.h"
void CountingSort::sort(std::vector<int>& arr) { // Мы создаём вспомогательный массив и на старте заполняем его нулями. 
    //Проходим по всему исходному массиву и смотрим очередное значение в ячейке.  Берём содержимое этой ячейки и увеличиваем на единицу 
    //значение вспомогательного массива под этим номером.Например, если мы встретили число 5, то увеличиваем на единицу пятый элемент 
    // вспомогательного массива.Если встретили 13 — тринадцатый.После цикла во вспомогательном массиве у нас хранятся данные, сколько раз встречается каждый элемент.
    //Теперь мы проходим по вспомогательному массиву, и если в очередной ячейке лежит что - то больше нуля, то мы в исходный массив столько же 
    // раз отправляем номер этой ячейки.Например, в первой ячейке вспомогательного массива лежит число 7. Это значит, что в исходный массив мы отправляем единицу 7 раз подряд.
    int max = *max_element(arr.begin(), arr.end());
    int min = *min_element(arr.begin(), arr.end());
    int range = max - min + 1;

    std::vector<int> count(range), output(arr.size());
    for (int i = 0; i < arr.size(); i++) {
        count[arr[i] - min]++;
    }
    for (int i = 1; i < range; i++) {
        count[i] += count[i - 1];
    }
    for (int i = arr.size() - 1; i >= 0; i--) {
        output[count[arr[i] - min] - 1] = arr[i];
        count[arr[i] - min]--;
    }
    for (int i = 0; i < arr.size(); i++) {
        arr[i] = output[i];
    }
}